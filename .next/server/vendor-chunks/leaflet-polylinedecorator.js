/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/leaflet-polylinedecorator";
exports.ids = ["vendor-chunks/leaflet-polylinedecorator"];
exports.modules = {

/***/ "(ssr)/./node_modules/leaflet-polylinedecorator/dist/leaflet.polylineDecorator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/leaflet-polylinedecorator/dist/leaflet.polylineDecorator.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("(function (global, factory) {\n\t true ? factory(__webpack_require__(/*! leaflet */ \"(ssr)/./node_modules/leaflet/dist/leaflet-src.js\")) :\n\t0;\n}(this, (function (L$1) { 'use strict';\n\nL$1 = L$1 && L$1.hasOwnProperty('default') ? L$1['default'] : L$1;\n\n// functional re-impl of L.Point.distanceTo,\n// with no dependency on Leaflet for easier testing\nfunction pointDistance(ptA, ptB) {\n    var x = ptB.x - ptA.x;\n    var y = ptB.y - ptA.y;\n    return Math.sqrt(x * x + y * y);\n}\n\nvar computeSegmentHeading = function computeSegmentHeading(a, b) {\n    return (Math.atan2(b.y - a.y, b.x - a.x) * 180 / Math.PI + 90 + 360) % 360;\n};\n\nvar asRatioToPathLength = function asRatioToPathLength(_ref, totalPathLength) {\n    var value = _ref.value,\n        isInPixels = _ref.isInPixels;\n    return isInPixels ? value / totalPathLength : value;\n};\n\nfunction parseRelativeOrAbsoluteValue(value) {\n    if (typeof value === 'string' && value.indexOf('%') !== -1) {\n        return {\n            value: parseFloat(value) / 100,\n            isInPixels: false\n        };\n    }\n    var parsedValue = value ? parseFloat(value) : 0;\n    return {\n        value: parsedValue,\n        isInPixels: parsedValue > 0\n    };\n}\n\nvar pointsEqual = function pointsEqual(a, b) {\n    return a.x === b.x && a.y === b.y;\n};\n\nfunction pointsToSegments(pts) {\n    return pts.reduce(function (segments, b, idx, points) {\n        // this test skips same adjacent points\n        if (idx > 0 && !pointsEqual(b, points[idx - 1])) {\n            var a = points[idx - 1];\n            var distA = segments.length > 0 ? segments[segments.length - 1].distB : 0;\n            var distAB = pointDistance(a, b);\n            segments.push({\n                a: a,\n                b: b,\n                distA: distA,\n                distB: distA + distAB,\n                heading: computeSegmentHeading(a, b)\n            });\n        }\n        return segments;\n    }, []);\n}\n\nfunction projectPatternOnPointPath(pts, pattern) {\n    // 1. split the path into segment infos\n    var segments = pointsToSegments(pts);\n    var nbSegments = segments.length;\n    if (nbSegments === 0) {\n        return [];\n    }\n\n    var totalPathLength = segments[nbSegments - 1].distB;\n\n    var offset = asRatioToPathLength(pattern.offset, totalPathLength);\n    var endOffset = asRatioToPathLength(pattern.endOffset, totalPathLength);\n    var repeat = asRatioToPathLength(pattern.repeat, totalPathLength);\n\n    var repeatIntervalPixels = totalPathLength * repeat;\n    var startOffsetPixels = offset > 0 ? totalPathLength * offset : 0;\n    var endOffsetPixels = endOffset > 0 ? totalPathLength * endOffset : 0;\n\n    // 2. generate the positions of the pattern as offsets from the path start\n    var positionOffsets = [];\n    var positionOffset = startOffsetPixels;\n    do {\n        positionOffsets.push(positionOffset);\n        positionOffset += repeatIntervalPixels;\n    } while (repeatIntervalPixels > 0 && positionOffset < totalPathLength - endOffsetPixels);\n\n    // 3. projects offsets to segments\n    var segmentIndex = 0;\n    var segment = segments[0];\n    return positionOffsets.map(function (positionOffset) {\n        // find the segment matching the offset,\n        // starting from the previous one as offsets are ordered\n        while (positionOffset > segment.distB && segmentIndex < nbSegments - 1) {\n            segmentIndex++;\n            segment = segments[segmentIndex];\n        }\n\n        var segmentRatio = (positionOffset - segment.distA) / (segment.distB - segment.distA);\n        return {\n            pt: interpolateBetweenPoints(segment.a, segment.b, segmentRatio),\n            heading: segment.heading\n        };\n    });\n}\n\n/**\n* Finds the point which lies on the segment defined by points A and B,\n* at the given ratio of the distance from A to B, by linear interpolation.\n*/\nfunction interpolateBetweenPoints(ptA, ptB, ratio) {\n    if (ptB.x !== ptA.x) {\n        return {\n            x: ptA.x + ratio * (ptB.x - ptA.x),\n            y: ptA.y + ratio * (ptB.y - ptA.y)\n        };\n    }\n    // special case where points lie on the same vertical axis\n    return {\n        x: ptA.x,\n        y: ptA.y + (ptB.y - ptA.y) * ratio\n    };\n}\n\n(function() {\r\n    // save these original methods before they are overwritten\r\n    var proto_initIcon = L.Marker.prototype._initIcon;\r\n    var proto_setPos = L.Marker.prototype._setPos;\r\n\r\n    var oldIE = (L.DomUtil.TRANSFORM === 'msTransform');\r\n\r\n    L.Marker.addInitHook(function () {\r\n        var iconOptions = this.options.icon && this.options.icon.options;\r\n        var iconAnchor = iconOptions && this.options.icon.options.iconAnchor;\r\n        if (iconAnchor) {\r\n            iconAnchor = (iconAnchor[0] + 'px ' + iconAnchor[1] + 'px');\r\n        }\r\n        this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || 'center bottom' ;\r\n        this.options.rotationAngle = this.options.rotationAngle || 0;\r\n\r\n        // Ensure marker keeps rotated during dragging\r\n        this.on('drag', function(e) { e.target._applyRotation(); });\r\n    });\r\n\r\n    L.Marker.include({\r\n        _initIcon: function() {\r\n            proto_initIcon.call(this);\r\n        },\r\n\r\n        _setPos: function (pos) {\r\n            proto_setPos.call(this, pos);\r\n            this._applyRotation();\r\n        },\r\n\r\n        _applyRotation: function () {\r\n            if(this.options.rotationAngle) {\r\n                this._icon.style[L.DomUtil.TRANSFORM+'Origin'] = this.options.rotationOrigin;\r\n\r\n                if(oldIE) {\r\n                    // for IE 9, use the 2D rotation\r\n                    this._icon.style[L.DomUtil.TRANSFORM] = 'rotate(' + this.options.rotationAngle + 'deg)';\r\n                } else {\r\n                    // for modern browsers, prefer the 3D accelerated version\r\n                    this._icon.style[L.DomUtil.TRANSFORM] += ' rotateZ(' + this.options.rotationAngle + 'deg)';\r\n                }\r\n            }\r\n        },\r\n\r\n        setRotationAngle: function(angle) {\r\n            this.options.rotationAngle = angle;\r\n            this.update();\r\n            return this;\r\n        },\r\n\r\n        setRotationOrigin: function(origin) {\r\n            this.options.rotationOrigin = origin;\r\n            this.update();\r\n            return this;\r\n        }\r\n    });\r\n})();\n\nL$1.Symbol = L$1.Symbol || {};\n\n/**\n* A simple dash symbol, drawn as a Polyline.\n* Can also be used for dots, if 'pixelSize' option is given the 0 value.\n*/\nL$1.Symbol.Dash = L$1.Class.extend({\n    options: {\n        pixelSize: 10,\n        pathOptions: {}\n    },\n\n    initialize: function initialize(options) {\n        L$1.Util.setOptions(this, options);\n        this.options.pathOptions.clickable = false;\n    },\n\n    buildSymbol: function buildSymbol(dirPoint, latLngs, map, index, total) {\n        var opts = this.options;\n        var d2r = Math.PI / 180;\n\n        // for a dot, nothing more to compute\n        if (opts.pixelSize <= 1) {\n            return L$1.polyline([dirPoint.latLng, dirPoint.latLng], opts.pathOptions);\n        }\n\n        var midPoint = map.project(dirPoint.latLng);\n        var angle = -(dirPoint.heading - 90) * d2r;\n        var a = L$1.point(midPoint.x + opts.pixelSize * Math.cos(angle + Math.PI) / 2, midPoint.y + opts.pixelSize * Math.sin(angle) / 2);\n        // compute second point by central symmetry to avoid unecessary cos/sin\n        var b = midPoint.add(midPoint.subtract(a));\n        return L$1.polyline([map.unproject(a), map.unproject(b)], opts.pathOptions);\n    }\n});\n\nL$1.Symbol.dash = function (options) {\n    return new L$1.Symbol.Dash(options);\n};\n\nL$1.Symbol.ArrowHead = L$1.Class.extend({\n    options: {\n        polygon: true,\n        pixelSize: 10,\n        headAngle: 60,\n        pathOptions: {\n            stroke: false,\n            weight: 2\n        }\n    },\n\n    initialize: function initialize(options) {\n        L$1.Util.setOptions(this, options);\n        this.options.pathOptions.clickable = false;\n    },\n\n    buildSymbol: function buildSymbol(dirPoint, latLngs, map, index, total) {\n        return this.options.polygon ? L$1.polygon(this._buildArrowPath(dirPoint, map), this.options.pathOptions) : L$1.polyline(this._buildArrowPath(dirPoint, map), this.options.pathOptions);\n    },\n\n    _buildArrowPath: function _buildArrowPath(dirPoint, map) {\n        var d2r = Math.PI / 180;\n        var tipPoint = map.project(dirPoint.latLng);\n        var direction = -(dirPoint.heading - 90) * d2r;\n        var radianArrowAngle = this.options.headAngle / 2 * d2r;\n\n        var headAngle1 = direction + radianArrowAngle;\n        var headAngle2 = direction - radianArrowAngle;\n        var arrowHead1 = L$1.point(tipPoint.x - this.options.pixelSize * Math.cos(headAngle1), tipPoint.y + this.options.pixelSize * Math.sin(headAngle1));\n        var arrowHead2 = L$1.point(tipPoint.x - this.options.pixelSize * Math.cos(headAngle2), tipPoint.y + this.options.pixelSize * Math.sin(headAngle2));\n\n        return [map.unproject(arrowHead1), dirPoint.latLng, map.unproject(arrowHead2)];\n    }\n});\n\nL$1.Symbol.arrowHead = function (options) {\n    return new L$1.Symbol.ArrowHead(options);\n};\n\nL$1.Symbol.Marker = L$1.Class.extend({\n    options: {\n        markerOptions: {},\n        rotate: false\n    },\n\n    initialize: function initialize(options) {\n        L$1.Util.setOptions(this, options);\n        this.options.markerOptions.clickable = false;\n        this.options.markerOptions.draggable = false;\n    },\n\n    buildSymbol: function buildSymbol(directionPoint, latLngs, map, index, total) {\n        if (this.options.rotate) {\n            this.options.markerOptions.rotationAngle = directionPoint.heading + (this.options.angleCorrection || 0);\n        }\n        return L$1.marker(directionPoint.latLng, this.options.markerOptions);\n    }\n});\n\nL$1.Symbol.marker = function (options) {\n    return new L$1.Symbol.Marker(options);\n};\n\nvar isCoord = function isCoord(c) {\n    return c instanceof L$1.LatLng || Array.isArray(c) && c.length === 2 && typeof c[0] === 'number';\n};\n\nvar isCoordArray = function isCoordArray(ll) {\n    return Array.isArray(ll) && isCoord(ll[0]);\n};\n\nL$1.PolylineDecorator = L$1.FeatureGroup.extend({\n    options: {\n        patterns: []\n    },\n\n    initialize: function initialize(paths, options) {\n        L$1.FeatureGroup.prototype.initialize.call(this);\n        L$1.Util.setOptions(this, options);\n        this._map = null;\n        this._paths = this._initPaths(paths);\n        this._bounds = this._initBounds();\n        this._patterns = this._initPatterns(this.options.patterns);\n    },\n\n    /**\n    * Deals with all the different cases. input can be one of these types:\n    * array of LatLng, array of 2-number arrays, Polyline, Polygon,\n    * array of one of the previous.\n    */\n    _initPaths: function _initPaths(input, isPolygon) {\n        var _this = this;\n\n        if (isCoordArray(input)) {\n            // Leaflet Polygons don't need the first point to be repeated, but we do\n            var coords = isPolygon ? input.concat([input[0]]) : input;\n            return [coords];\n        }\n        if (input instanceof L$1.Polyline) {\n            // we need some recursivity to support multi-poly*\n            return this._initPaths(input.getLatLngs(), input instanceof L$1.Polygon);\n        }\n        if (Array.isArray(input)) {\n            // flatten everything, we just need coordinate lists to apply patterns\n            return input.reduce(function (flatArray, p) {\n                return flatArray.concat(_this._initPaths(p, isPolygon));\n            }, []);\n        }\n        return [];\n    },\n\n    // parse pattern definitions and precompute some values\n    _initPatterns: function _initPatterns(patternDefs) {\n        return patternDefs.map(this._parsePatternDef);\n    },\n\n    /**\n    * Changes the patterns used by this decorator\n    * and redraws the new one.\n    */\n    setPatterns: function setPatterns(patterns) {\n        this.options.patterns = patterns;\n        this._patterns = this._initPatterns(this.options.patterns);\n        this.redraw();\n    },\n\n    /**\n    * Changes the patterns used by this decorator\n    * and redraws the new one.\n    */\n    setPaths: function setPaths(paths) {\n        this._paths = this._initPaths(paths);\n        this._bounds = this._initBounds();\n        this.redraw();\n    },\n\n    /**\n    * Parse the pattern definition\n    */\n    _parsePatternDef: function _parsePatternDef(patternDef, latLngs) {\n        return {\n            symbolFactory: patternDef.symbol,\n            // Parse offset and repeat values, managing the two cases:\n            // absolute (in pixels) or relative (in percentage of the polyline length)\n            offset: parseRelativeOrAbsoluteValue(patternDef.offset),\n            endOffset: parseRelativeOrAbsoluteValue(patternDef.endOffset),\n            repeat: parseRelativeOrAbsoluteValue(patternDef.repeat)\n        };\n    },\n\n    onAdd: function onAdd(map) {\n        this._map = map;\n        this._draw();\n        this._map.on('moveend', this.redraw, this);\n    },\n\n    onRemove: function onRemove(map) {\n        this._map.off('moveend', this.redraw, this);\n        this._map = null;\n        L$1.FeatureGroup.prototype.onRemove.call(this, map);\n    },\n\n    /**\n    * As real pattern bounds depends on map zoom and bounds,\n    * we just compute the total bounds of all paths decorated by this instance.\n    */\n    _initBounds: function _initBounds() {\n        var allPathCoords = this._paths.reduce(function (acc, path) {\n            return acc.concat(path);\n        }, []);\n        return L$1.latLngBounds(allPathCoords);\n    },\n\n    getBounds: function getBounds() {\n        return this._bounds;\n    },\n\n    /**\n    * Returns an array of ILayers object\n    */\n    _buildSymbols: function _buildSymbols(latLngs, symbolFactory, directionPoints) {\n        var _this2 = this;\n\n        return directionPoints.map(function (directionPoint, i) {\n            return symbolFactory.buildSymbol(directionPoint, latLngs, _this2._map, i, directionPoints.length);\n        });\n    },\n\n    /**\n    * Compute pairs of LatLng and heading angle,\n    * that define positions and directions of the symbols on the path\n    */\n    _getDirectionPoints: function _getDirectionPoints(latLngs, pattern) {\n        var _this3 = this;\n\n        if (latLngs.length < 2) {\n            return [];\n        }\n        var pathAsPoints = latLngs.map(function (latLng) {\n            return _this3._map.project(latLng);\n        });\n        return projectPatternOnPointPath(pathAsPoints, pattern).map(function (point) {\n            return {\n                latLng: _this3._map.unproject(L$1.point(point.pt)),\n                heading: point.heading\n            };\n        });\n    },\n\n    redraw: function redraw() {\n        if (!this._map) {\n            return;\n        }\n        this.clearLayers();\n        this._draw();\n    },\n\n    /**\n    * Returns all symbols for a given pattern as an array of FeatureGroup\n    */\n    _getPatternLayers: function _getPatternLayers(pattern) {\n        var _this4 = this;\n\n        var mapBounds = this._map.getBounds().pad(0.1);\n        return this._paths.map(function (path) {\n            var directionPoints = _this4._getDirectionPoints(path, pattern)\n            // filter out invisible points\n            .filter(function (point) {\n                return mapBounds.contains(point.latLng);\n            });\n            return L$1.featureGroup(_this4._buildSymbols(path, pattern.symbolFactory, directionPoints));\n        });\n    },\n\n    /**\n    * Draw all patterns\n    */\n    _draw: function _draw() {\n        var _this5 = this;\n\n        this._patterns.map(function (pattern) {\n            return _this5._getPatternLayers(pattern);\n        }).forEach(function (layers) {\n            _this5.addLayer(L$1.featureGroup(layers));\n        });\n    }\n});\n/*\n * Allows compact syntax to be used\n */\nL$1.polylineDecorator = function (paths, options) {\n    return new L$1.PolylineDecorator(paths, options);\n};\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leaflet-polylinedecorator/dist/leaflet.polylineDecorator.js\n");

/***/ })

};
;