/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "(pages-dir-node)/./src/workers/networkWorker.js":
/*!**************************************!*\
  !*** ./src/workers/networkWorker.js ***!
  \**************************************/
/***/ (() => {

eval("/* eslint-disable no-restricted-globals */ // 네트워크 필터링 및 중심성 계산 워커\n// export type Network = {\n//   id: number\n//   nationality: string\n//   ethnicity: string\n//   migration_year: number\n//   user_name: string\n//   type: string\n//   edges: { edgeType: string; targetId: number }[]\n//   migration_traces: { reason: string }[]\n// }\n// export type FilterOptions = {\n//   nationality: string[] | string\n//   ethnicity: string[] | string\n//   edgeType: string[] | string\n//   entityType: string\n//   yearRange: [number, number]\n//   migrationYearRange: [number, number] // 추가\n//   userNetworkFilter: boolean\n//   userNetworkTraceFilter: boolean\n//   userNetworkConnectionFilter: boolean\n//   migrationReasons: string[]\n//   selectedMigrationNetworkId: number | null\n// }\nfunction filterNetworks(networks, filters, selectedEdgeId, userName) {\n    const total = networks.length;\n    let filtered = [];\n    self.postMessage({\n        type: \"PROGRESS\",\n        payload: 0\n    });\n    networks.forEach((network, idx)=>{\n        // 국적 필터\n        const matchesNationality = filters.nationality.includes(\"all\") || filters.nationality.includes(network.nationality) || filters.nationality === \"all\" || network.nationality === filters.nationality;\n        // 민족 필터\n        const matchesEthnicity = filters.ethnicity.includes(\"all\") || filters.ethnicity.includes(network.ethnicity) || filters.ethnicity === \"all\" || network.ethnicity === filters.ethnicity;\n        // 연도 필터\n        const matchesYearRange = network.migration_year >= filters.yearRange[0] && network.migration_year <= filters.yearRange[1];\n        // 이동연도(이주연도) 필터: migration_traces 중 하나라도 migrationYearRange에 포함되면 통과\n        const matchesMigrationYearRange = !filters.migrationYearRange || filters.migrationYearRange.length !== 2 || network.migration_traces.some((trace)=>trace.migration_year >= filters.migrationYearRange[0] && trace.migration_year <= filters.migrationYearRange[1]);\n        // 유저 네트워크 필터\n        const matchesUserNetwork = !filters.userNetworkFilter || !userName || network.user_name === userName;\n        // 엣지 필터\n        const matchesEdge = !selectedEdgeId || network.edges.some((edge)=>edge.targetId === selectedEdgeId);\n        // 엔티티 타입 필터\n        const matchesEntityType = filters.entityType === \"all\" || (Array.isArray(filters.entityType) ? filters.entityType.includes(\"all\") || filters.entityType.includes(network.type) : network.type === filters.entityType);\n        // 엣지 타입 필터 (멀티 지원)\n        let matchesEdgeType = true;\n        if (filters.edgeType && filters.edgeType.length > 0 && !filters.edgeType.includes(\"all\")) {\n            matchesEdgeType = network.edges.some((edge)=>Array.isArray(filters.edgeType) ? filters.edgeType.includes(edge.edgeType) : filters.edgeType === edge.edgeType);\n        }\n        // 이주 원인 필터\n        const matchesMigrationReasons = filters.migrationReasons.includes(\"all\") || filters.migrationReasons.length === 0 || network.migration_traces.some((trace)=>filters.migrationReasons.includes(trace.reason));\n        // 여러 네트워크 필터\n        const matchesSelectedMigrationNetworks = !filters.selectedMigrationNetworkIds || filters.selectedMigrationNetworkIds.length === 0 || filters.selectedMigrationNetworkIds.includes(network.id);\n        const matches = matchesNationality && matchesEthnicity && matchesYearRange && matchesMigrationYearRange && matchesUserNetwork && matchesEdge && matchesEntityType && matchesMigrationReasons && matchesSelectedMigrationNetworks && matchesEdgeType // 추가\n        ;\n        if (matches) filtered.push(network);\n        // 5% 단위로 진행률 메시지 전송 (혹은 100개마다 등)\n        if (idx % Math.ceil(total / 20) === 0 || idx === total - 1) {\n            const percent = Math.round((idx + 1) / total * 100);\n            self.postMessage({\n                type: \"PROGRESS\",\n                payload: percent\n            });\n        }\n    });\n    return filtered;\n}\n// 중심성 계산 (예시: degree centrality)\nfunction calculateCentrality(filteredNetworks, centralityType) {\n    const centrality = {};\n    if (centralityType === \"degree\") {\n        filteredNetworks.forEach((network)=>{\n            centrality[network.id] = network.edges.length;\n        });\n    } else if (centralityType === \"none\") {\n        filteredNetworks.forEach((network)=>{\n            centrality[network.id] = 1;\n        });\n    }\n    // 필요시 다른 중심성도 추가\n    return centrality;\n}\nself.onmessage = function(e) {\n    const { type, payload } = e.data;\n    if (type === \"FILTER_NETWORKS\") {\n        self.postMessage({\n            type: \"PROGRESS\",\n            payload: 0\n        }) // 반드시 0부터 시작!\n        ;\n        const filtered = filterNetworks(payload.networks, payload.filters, payload.selectedEdgeId, payload.userName);\n        self.postMessage({\n            type: \"FILTERED_NETWORKS\",\n            payload: filtered\n        });\n        self.postMessage({\n            type: \"PROGRESS\",\n            payload: 100\n        }) // 마지막에 100!\n        ;\n    }\n    if (type === \"CALCULATE_CENTRALITY\") {\n        const { filteredNetworks, centralityType } = payload;\n        const result = calculateCentrality(filteredNetworks, centralityType);\n        self.postMessage({\n            type: \"CENTRALITY_RESULT\",\n            payload: result\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/workers/networkWorker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["(pages-dir-node)/./src/workers/networkWorker.js"]();
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;